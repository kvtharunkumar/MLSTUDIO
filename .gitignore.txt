-- Creating EMPLOYEE Table
CREATE TABLE EMPLOYEE (
    Eid NUMBER PRIMARY KEY,
    Ename VARCHAR2(50),
    Addr VARCHAR2(100),
    Did NUMBER REFERENCES DEPARTMENT(Did),
    Ph_no VARCHAR2(15),
    Salary NUMBER
);

-- Creating DEPARTMENT Table (Assuming it's referenced by EMPLOYEE)
CREATE TABLE DEPARTMENT (
    Did NUMBER PRIMARY KEY,
    Dname VARCHAR2(50)
);

-- Inserting sample data
INSERT INTO DEPARTMENT VALUES (1, 'HR');
INSERT INTO DEPARTMENT VALUES (2, 'IT');

INSERT INTO EMPLOYEE VALUES (1, 'John', 'Address1', 1, '1234567890', 50000);
INSERT INTO EMPLOYEE VALUES (2, 'Jane', 'Address2', 2, '9876543210', 60000);

-- PL/SQL Block
DECLARE
    v_dept_name VARCHAR2(50);
    v_dept_id NUMBER;
    v_sal NUMBER := 2000;
    e_invalid_dept EXCEPTION;



BEGIN
    -- Set the department name for which you want to update salary
    v_dept_name := 'Finance';

    -- Get department ID for the given name
    SELECT Did INTO v_dept_id
    FROM DEPARTMENT
    WHERE Dname = v_dept_name;

    -- Check if the department exists
    IF SQL%NOTFOUND THEN
        RAISE e_invalid_dept;
    ELSE
        -- Update salary for employees in the specified department
        UPDATE EMPLOYEE
        SET Salary = Salary + v_sal
        WHERE Did = v_dept_id;

        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Salary updated successfully.');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found for the specified department.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Too many rows found for the specified department.');
    WHEN e_invalid_department THEN
        DBMS_OUTPUT.PUT_LINE('giving invalid department name');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

CREATE OR REPLACE TRIGGER employee_operation_trigger
BEFORE INSERT OR UPDATE OR DELETE
ON EMPLOYEE
FOR EACH ROW
DECLARE
    v_operation_message VARCHAR2(100);
BEGIN
    CASE
        WHEN INSERTING THEN
            v_operation_message := 'Insert operation is being performed.';
        WHEN UPDATING THEN
            v_operation_message := 'Update operation is being performed.';
        WHEN DELETING THEN
            v_operation_message := 'Delete operation is being performed.';
        ELSE
            v_operation_message := 'Unknown operation.';
    END CASE;

    DBMS_OUTPUT.PUT_LINE(v_operation_message);
END;
/

select *from EMPLOYEE;
-- Creating a Trigger
CREATE OR REPLACE TRIGGER check_salary_trigger
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
DECLARE
    v_min_salary NUMBER := 2000;
BEGIN
    IF :NEW.Salary < v_min_salary THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salary must be greater than or equal to ' || v_min_salary);
    END IF;
END;

INSERT INTO EMPLOYEE VALUES  (3, 'Jane', 'Address2', 2, '9876543210', 10000);